要求：
为了防止“读者优先”可能导致的写者饥饿，可以考虑写者优先。即，当共享数据区被读者占用时，后续紧邻到达的读者可以继续进入，若这时有一个写者到来并阻塞等待，则写者后续到来的读者全部
阻塞等待。即只要有一个写者申请写数据，则不再允许新的读者进程进入读数据。这样，写者只需等待先于它到达的读者完成其读数据的任务，而不用等待其后到达的读者。

新读者：
  如果无读者、写者，新读者可以读。
  如果有写者等待，且有其它读者正在读，新读者等待。
  如果有写者写，新读者等待。
新写者：
  如果无读者，新写者可以写。
  如果有读者，新写者等待。
  如果有其它写者，新写者等待。

思路：
同读者优先有一些类似，写者优先也需要用一个整型变量Readcount记录当前的读者数目，用于确定是否需要释放正在等待的写者线程(当Readcount=0时，表明所有的读者都已经读完，需要释放写者等待
队列中的一个写者)。在每一个读者读文件之前，都必须修改Readcount变量的值（增一），在每一个读者读完文件之后，也必须修改Readcount变量的值（减一）。因此需要一个互斥对象Rmutex来实现对
全局变量Readcount修改时的互斥。
为了实现写-写互斥，需要增加一个写互斥信号量Wmutex。保证写进程与其它进程写互斥地访问数据集。
另外，还需要增加一个信号量 S，初值为 1，用来实现读写互斥，使写者请求发生后的读者等待。

综上，设置一个共享变量和三个互斥信号量。
共享变量 Readcount：记录当前正在读数据集的读进程数目，初值为 0。
读互斥信号量 Rmutex ：表示读进程互斥地访问共享变量 Readcount，初值为 1。
写互斥信号量 Wmutex：表示写进程与其它进程（读、写）互斥地访问数据集，初值为 1。
读写互斥信号量 S ：表示读进程和写进程互斥地访问数据集，初值为 1。
