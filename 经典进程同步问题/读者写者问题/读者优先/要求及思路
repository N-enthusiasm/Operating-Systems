要求：
当一个读者正在读数据时，另一个读者也需要读数据，应允许第二个读者进入，同理第三个及后续读者都应允许进入。现在假设一个写者到来，由于写操作是排他的，所以它不能访问数据，
需要阻塞等待。如果一直有新的读者陆续到来，写者的写操作将被严重推迟。该方法称为“读者优先”，即一旦有读者正在读数据，只有当全部读者退出，才允许写者进入写数据。
新读者：
  如果无读者、写者，新读者可以读。
  如果有写者等待，但有其它读者正在读，则新读者也可以读。
  如果有写者写，新读者等待。
新写者：
  如果无读者，新写者可以写。
  如果有读者，新写者等待。
  如果有其它写者，新写者等待。

思路：
读者优先指的是除非有写者在写文件，否则读者不需要等待。所以可以用一个整型变量Readcount记录当前的读者数目，用于确定是否需要释放正在等待的写者线程(当Readcount=0时，表明所有的
读者都已经读完，需要释放写者等待队列中的一个写者)。在每一个读者读文件之前，都必须修改Readcount变量的值（增一），在每一个读者读完文件之后，也必须修改Readcount变量的值（减一）。
因此需要一个互斥对象Rmutex来实现对全局变量Readcount修改时的互斥。
另外，为了实现写-写互斥，需要增加一个写互斥信号量Wmutex。保证写进程与其它写进程互斥地访问数据集。通过这种方法，也可以实现读-写互斥，当Readcount=1时(即第一个读者到来时)，读者线
程也必须P(Wmutex)，此时写者阻塞。当写者P(Wmutex)后，接下来再到来的第一个读者判断完Readcount=1后阻塞在P(Wmutex)这一步上无法释放Rmutex，其余的读者由于等待第一个读者对Rmutex的释
放而阻塞在P(Rmutex)上。

综上，设置一个共享变量和两个互斥信号量。
共享变量 Readcount：记录当前正在读数据集的读进程数目，初值为 0。
读互斥信号量 Rmutex ：表示读进程互斥地访问共享变量 Readcount，初值为 1。
写互斥信号量 Wmutex：表示写进程与其它进程（读、写）互斥地访问数据集，初值为 1。
